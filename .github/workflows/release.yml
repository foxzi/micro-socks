name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-binaries:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: arm
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: Build binary
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          if [ -z "$VERSION" ] || [ "$VERSION" = "$GITHUB_REF" ]; then
            VERSION="dev"
          fi

          BINARY_NAME="micro-socks"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="micro-socks.exe"
          fi

          mkdir -p dist
          go build -ldflags "-s -w" -o "dist/${BINARY_NAME}" ./

          # Create archive
          cd dist
          ARCHIVE_NAME="micro-socks-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "${ARCHIVE_NAME}.zip" "${BINARY_NAME}"
            echo "ARCHIVE=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
          else
            tar czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}"
            echo "ARCHIVE=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/${{ env.ARCHIVE }}

  build-deb:
    name: Build Debian packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: Build Debian package
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          if [ -z "$VERSION" ] || [ "$VERSION" = "$GITHUB_REF" ]; then
            VERSION="0.1.0"
          fi

          export VERSION=$VERSION
          export ARCH=${{ matrix.arch }}
          bash scripts/build-deb.sh

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: dist/*.deb

  build-rpm:
    name: Build RPM packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: Install RPM build tools
        run: sudo apt-get update && sudo apt-get install -y rpm

      - name: Build RPM package
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          if [ -z "$VERSION" ] || [ "$VERSION" = "$GITHUB_REF" ]; then
            VERSION="0.1.0"
          fi

          export VERSION=$VERSION
          export ARCH=${{ matrix.arch }}
          bash scripts/build-rpm.sh

      - name: Upload RPM package
        uses: actions/upload-artifact@v4
        with:
          name: rpm-${{ matrix.arch }}
          path: dist/${{ matrix.arch }}/*.rpm

  release:
    name: Create GitHub Release
    needs: [build-binaries, build-deb, build-rpm]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" -o -name "*.deb" -o -name "*.rpm" \) -exec cp {} release/ \;
          ls -lh release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
